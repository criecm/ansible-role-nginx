---

- name: site vars
  include_vars: site.yml

- name: site fact
  set_fact:
    site: '{{ default_site | combine(onesite) }}'

- name: site includes
  template:
    dest: '{{ nginx_etcdir }}/{{ item | basename | regex_replace("\.j2$","") }}'
    src: '{{ lookup("first_found", include_locations) }}/{{ item }}'
  with_items: '{{ site.nginx_includes }}'
  when: '"nginx_includes" in site'
  notify: reload nginx

- name: conf includes
  copy:
    src: '{{ item }}'
    dest: '{{ nginx_etcdir }}/conf.d/{{ item | regex_replace(".*/([^/]+)$","\1") }}'
    mode: '0644'
  with_fileglob:
    - '{{ site.id }}/nginx/conf.d/*.conf'
  notify: reload nginx

- name: conf includes (templates)
  template:
    src: '{{ item }}'
    dest: '{{ nginx_etcdir }}/conf.d/{{ item | regex_replace(".*/([^/]+)\.j2$","\1") }}'
    mode: '0644'
  with_fileglob:
    - '{{ site.id }}/nginx/conf.d/*.conf.j2'
  notify: reload nginx

- name: root dir
  copy:
    dest: '{{ site.rootdir }}/'
    src: '{{ site.rootsrc }}/'
    mode: a=rX,u+w
    owner: root
  when: '"rootsrc" in site and site.rootsrc'

- name: stat rootdir
  stat:
    path: '{{ site.rootdir }}'
  register: statrootdir

- name: mkdir root dir
  file:
    dest: '{{ site.rootdir }}'
    state: directory
    mode: '0755'
    owner: root
  when: not statrootdir.stat.exists

- name: x509 certs
  block:
    - name: mkdir
      file:
        path: '{{ tls_certs_dir }}/private'
        state: directory
        mode: '0711'
    - name: x509 cert
      copy:
        src: '{{ site.tls_cert }}'
        dest: '{{ tls_certs_dir }}/{{ site.name }}.crt'
        mode: '0400'
      notify: reload nginx
    - name: x509 key
      copy:
        src: '{{ site.tls_key }}'
        dest: '{{ tls_certs_dir }}/private/{{ site.name }}.key'
        mode: '0400'
      notify: reload nginx
    - name: x509 chain
      copy:
        src: '{{ site.x509_stapling_chain }}'
        dest: '{{ tls_certs_dir }}/{{ site.x509_stapling_chain | basename }}'
        mode: '0644'
      when: site.x509_stapling_chain != ""
      notify: reload nginx
  when: '"tls_cert" in site and site.tls_cert != ""'

- name: site config
  template:
    dest: '{{ nginx_etcdir }}/servers.d/{{ site.id }}.conf'
    src: '{{ lookup("first_found", siteconf_locations) }}'
  notify: reload nginx

- name: monitoring
  block:
    - name: create to_monitor entry
      set_fact:
        tmpmon:
          - proto: '{% if site.tls_cert or (proxified_by | count > 0) %}https{% else %}http{% endif %}'
            name: '{{ site.name }}'
            path: '{{ site.fcgi_status_path }}'
            type: fcgi-status
    - name: fcgi-status to_monitor
      set_fact:
        to_monitor: '{{ to_monitor | default([]) | union(tmpmon) }}'
        cacheable: yes
  when: '"fcgi_status_path" in site and site.fcgi_status_path != ""'

- name: nginx_sites_done fact
  set_fact:
    nginx_sites_done: True
